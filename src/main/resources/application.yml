server:
  port: 8080

spring:
  config:
    import: optional:file:.env[.properties] # .env 파일 로드

  profiles:
    active: local # 기본 활성화 프로파일 설정

  jpa:
    hibernate:
      ddl-auto: update # 테이블 생성 및 업데이트 전략
    properties:
      hibernate:
        format_sql: true # SQL 포맷팅
        highlight_sql: true # 하이라이트 SQL 출력
        use_sql_comments: true # 실제 JPQL SQL 주석 사용

---
spring:
  config:
    activate:
      on-profile: local

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/test?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: root
    password: 1234

app:
  aws:
    ec2:
      instance-front-url: http://localhost:3000

logging:
  level:
    org.hibernate.SQL: debug # Hibernate의 SQL을 출력
    org.hibernate.orm.jdbc.bind: trace # Hibernate의 SQL 바인딩을 출력
    org.springframework.transaction.interceptor: trace # Hibernate의 SQL 바인딩을 출력

---
spring:
  config:
    activate:
      on-profile: prod

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://my-db:3306/test?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    username: root
    password: 1234
    hikari:
      max-lifetime: 600000 # 커넥션 최대 생존 시간
      idle-timeout: 300000 # 커넥션 최대 유휴 시간
      connection-timeout: 30000 # 커넥션 타임아웃

app:
  aws:
    ec2:
      instance-front-url: http://43.203.42.37

logging:
  level:
    org.hibernate.SQL: error # Hibernate의 SQL을 출력
